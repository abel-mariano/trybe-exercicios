/* 1 - Crie um c√≥digo que exiba o valor dos n primeiros elementos da sequ√™ncia de Fibonacci.

A sequ√™ncia de Fibonacci come√ßa com 0 e 1 e os n√∫meros seguintes s√£o sempre a soma dos dois n√∫meros anteriores.

- Armazene o c√≥digo no arquivo fibonacci.js.
- Utilize o readline-sync para realizar o input de dados.
- O c√≥digo deve ser acionado atrav√©s do comando npm run fibonacci.
- N√£o imprima o valor 0, uma vez que ele n√£o est√° incluso na sequ√™ncia.
- Quando n = 10, exatamente 10 elementos devem ser exibidos.
- Adicione valida√ß√µes para garantir que o valor informado √© um inteiro maior que 0. 

üîúResposta:*/

const readline = require('readline-sync');

function handleFibonacci(quantity) {
  // a armazena o √∫ltimo n√∫mero que calculamos
  let a = 1;
  // b armazena o pen√∫ltimo n√∫mero que calculamos
  let b = 1;

  // Repetimos o loop enquanto `n` for maior que 0
  for (let n = quantity; n >= 0; n -= 1) {
    if (b) console.log(b);
    // Armazenamos o √∫ltimo valor calculado em uma vari√°vel tempor√°ria
    const temp = a;
    // Para calcular o novo valor, somamos o √∫ltimo valor com o pen√∫ltimo valor
    // O novo valor √© armazenado em `a`, j√° que ele passa a ser o √∫ltimo valor calculado
    a += b;
    // O valor antigo de `a`, que estava armazenado na vari√°vel tempor√°ria
    // agora se torna o pen√∫ltimo n√∫mero e, por isso, √© armazenado em `b`
    b = temp;
  }

  console.log(b);
  return b;
}

function main() {
  const n = readline.questionInt('Enter \'n\' value: ');

  if (n <= 0) {
    console.log('Enter a number greater then \'0\'!');
    return;
  }

  console.log(`n: ${n}`);

  handleFibonacci(n - 2);
}

main();
